'use strict';

const chalk = require('chalk');
const Git = require('nodegit');
const gistApi = require('gisthrower-api');
const mapper = require('gisthrower-infrastructure').messageMapper;
const file = require('gisthrower-infrastructure').file;
const open = require('open');

const printBasicDetails = (chunk) => {
  let printableChunk = mapper.gistBasicDetails(chunk);
  console.log(printableChunk);
};

const printDetailedInformation = (chunk) => {
  let printableChunk = mapper.gistDetailedInformations(chunk);
  console.log(printableChunk);
};

const printFileDetails = (files) => {
  const fileDetails = Object.keys(files).map((fileKey) => {
    return {
      name: fileKey,
      size: files[fileKey].size,
      language: files[fileKey].language? files[fileKey].language : 'None'
    };
  });
  const pritableArray = fileDetails.map(mapper.gistFileDetails);
  pritableArray.forEach((fileDetails) => { console.log(fileDetails); });
};

const getFileUrls = (files) => {
  const fileKeys = Object.keys(files);
  return fileKeys.map(key => files[key].raw_url);
};

const basicDetails = (id) => {
  gistApi.gist.get(id)
    .then((chunk) => {
      printBasicDetails(chunk);
    })
    .catch((error) => {
      console.error(error);
    });
};

const moreDetails = (id) => {
  gistApi.gist.get(id)
    .then(printDetailedInformation)
    .catch((error) => { console.error(error); });
};

const downloadFiles = (id, dest) => {
  gistApi.gist.get(id)
    .then((chunk) => {
      const fileUrls = getFileUrls(chunk.files);
      printFileDetails(chunk.files);
      console.log('Downloading Files...');
      file.downloadMultipleFile(fileUrls, dest, () => {
        console.log('Download Done!');
      });
    })
    .catch((error) => {
      console.error(error);
    });
};

const cloneGistRepository = (id, dest) => {
  gistApi.gist.get(id)
    .then((chunk) => {
      const message = chalk.bold.green('\'Clonning {0} gist\''.format(chunk.description));
      console.log(message);
      const pullUrl = chunk.git_pull_url;
      return Git.Clone(pullUrl, dest);
    })
    .then(() => {
      const message = chalk.bold.blue('Gist cloned to {0}'.format(dest));
      console.log(message);
    })
    .catch((error) => {
      console.error(error);
    });
};

const openGist = (id, browser) => {
  gistApi.gist.get(id)
    .then((chunk) => {
      typeof browser === 'string' ? open(chunk.html_url, browser) : open(chunk.html_url);
    })
    .catch((error) => {
      console.error(error);
    });
};

module.exports = {
  basic: basicDetails,
  moreDetails: moreDetails,
  downloadFiles: downloadFiles,
  clone: cloneGistRepository,
  open: openGist
};
